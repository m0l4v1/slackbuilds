#!/bin/bash
#-- wine for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.brg>
# Suggested usage: $ wine.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.winehq.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=wine
NAME32=wine-compat32
STNAME=wine-staging
PKGF=${PKG:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
PKG32=${PKGF}/${NAME32}

VERSION=${VERSION:-1.7.53}
SVER="$( echo ${VERSION} | cut -d. -f1-2 )"
# date for snapshot, wine-staging tag version for release tarball, without v
STVER=${STVER:-1.7.53}
STSNAPBRANCH=${STSNAPBRANCH:-master}
unset STREL
if echo "${STVER}" | fgrep -q '.' ;then
  STREL=YES
fi
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
  ARCH32=${ARCH32:-$(linux32 uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  ARCH32=${ARCH32:-i686}
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
[ "${SLKTARGET}" = "x86_64" ] && SLKTARGET32=${SLKTARGET32:-i486}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGNAME32=${NAME32}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}

# Set to YES to enable pulseaudio support (only apply pulseaudio patches from compholio)
SB_PA=${SB_PA:-YES}
# Set to YES to apply compholio staging patches
SB_STAGING=${SB_STAGING:-YES}

# Set to YES to enable maintainer mode support (uses Werror and rebuilt fonts and icons)
# Needs fontforge, icotool and librsvg
SB_MM=${SB_MM:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
STSRCDIR=${STNAME}-${STVER}
SRCARCHIVE=${SRCDIR}.tar.bz2
SSRCARCHIVE=${SRCARCHIVE}.sign
if [ "${STREL}" = "YES" ] ;then
  STSRCARCHIVE=v${VERSION}.tar.gz
else
  STSRCARCHIVE=${STSRCDIR}.tar.xz
fi

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="${MIRROR_SF}/${NAME}"
DL_URLB="http://ftp.winehq.org/pub/${NAME}/source/${SVER}"
STDL_URL="https://github.com/wine-compholio/wine-staging/archive/${STSRCARCHIVE}"
STSNAPUPDATE=${STNAME}-snapshot.sh

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} \
    || ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${file} || exit 1
done

if [ "${SB_STAGING}" = "YES" ] || [ "${SB_PA}" = "YES" ] ;then
  if [ "${STREL}" = "YES" ] ;then
    STSRCARCHIVE=${STSRCDIR}.tar.gz
    test -r ${CWD}/${STSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${STDL_URL} -O ${CWD}/${STSRCARCHIVE} || exit 1
  else
  (
    export snap=${STVER}
    export snapbranch=${STSNAPBRANCH}
    test -r ${CWD}/${STSRCARCHIVE} || sh ${CWD}/${STSNAPUPDATE} || exit 1
  ) || exit $?
  fi

  if ! test -s ${CWD}/${STSRCARCHIVE} ;then
    echo "${CWD}/${STSRCARCHIVE} is empty"
    echo "Delete ${CWD}/${STSRCARCHIVE}, check STVER and try again."
    exit 1
  fi
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  echo "This is a x86_64 build!"
  echo "Remember to have the needed multilib packages installed too!"
  sleep 5
else
  LIBDIRSUFFIX=""
  [ "${SLKTARGET}" = "x86_64" ] && SLKTARGET=i586
  export CC="gcc -m32"
  export CXX="g++ -m32"
  export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"
fi
unset LDFLAGS

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKGF} ]; then
  # Clean up a previous build
  rm -rf ${PKGF}
fi
mkdir -p ${PKG} ${PKG32}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

if [ "${SB_STAGING}" = "YES" ] || [ "${SB_PA}" = "YES" ] ;then
  tar -xvf ${CWD}/${STSRCARCHIVE} || exit 1
fi

SB_SROOT="$(pwd)"

chmod -R u+w,go+r-w,a-s .

unset SB_AUTOGEN
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

# Get gecko and mono versions
GECKO_VER="$(grep '^#define' dlls/appwiz.cpl/addons.c | grep ' GECKO_VERSION ' | awk '{print $3}' | tr -d \")"
if [ -z "${GECKO_VER}" ] ;then
  echo "Variable GECKO_VER not defined"
  exit 1
fi
MONO_VER="$(grep '^#define' dlls/appwiz.cpl/addons.c | grep ' MONO_VERSION ' | awk '{print $3}' | tr -d \")"
if [ -z "${MONO_VER}" ] ;then
  echo "Variable MONO_VER not defined"
  exit 1
fi

unset MORECFLAGS

sed -i \
  -e '/^CROSSCC/aMORECFLAGS ?=' \
  -e '/^CFLAGS/s|@CFLAGS@|\0 $(MORECFLAGS)|g' \
  Make.vars.in || exit 1

#sed -i -e '/^EXTRADEFS =/aCFLAGS += -O1' dlls/{kernel32,ntdll,setupapi}/Makefile.in || exit 1

SLKCFLAGS="$( echo ${SLKCFLAGS} | sed -e 's/ -._FORTIFY_SOURCE=.//' -e 's/ -fPIC//' -e 's/-fomit-frame-pointer//' ) -U_FORTIFY_SOURCE -Wno-error"

unset SB_PAOPTS SB_MMOPTS SB_STAGINGOPTS
[ "${SB_PA}" = "YES" ] || SB_PAOPTS="--without-pulse"
[ "${SB_STAGING}" = "YES" ] || SB_STAGINGOPTS='--without-xattr'

if [ "${SB_MM}" = "YES" ];then
  SB_MMOPTS="--enable-maintainer-mode"
fi

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  sed -i \
    -e 's|"-lncurses"|"-lncursesw"|g' \
    -e 's|OpenCL/opencl.h|CL/opencl.h|g' \
    configure.ac || exit 1
  autoreconf -ivf || exit $?
  ./tools\/make_requests || exit $?
fi

### Arch
sed -i \
  -e 's|-lncurses |-lncursesw |g' \
  -e 's|"-lncurses"|"-lncursesw"|g' \
  -e 's|OpenCL/opencl.h|CL/opencl.h|g' \
  configure || exit 1

SB_CONFIGURE() {
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
../configure \
  --prefix=/usr \
  --datadir=/usr/share \
  --sysconfdir=/etc/wine \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-tests \
  --with-x \
  --x-includes=/usr/include \
  --with-alsa \
  --without-cups \
  --with-dbus \
  --with-fontconfig \
  --with-freetype \
  --without-hal \
  --with-gnutls \
  --without-gstreamer \
  --with-jpeg \
  --with-mpg123 \
  --with-openal \
  --with-opengl \
  --with-png \
  --disable-tests \
  ${SB_PAOPTS} ${SB_STAGINGOPTS} \
  --build=${SLKTARGET}-${SLKDTARGET}-linux \
  $@ || return $?

}

SB_MAKE32() {
  export MORECFLAGS="-mstackrealign -mincoming-stack-boundary=2"
  make -j${NJOBS} || make
}

SB_INSTALL() {
  make install DESTDIR="$1" \
  LDCONFIG=/bin/true \
  UPDATE_DESKTOP_DATABASE=/bin/true || return $?
}

if [ "${ARCH}" = "x86_64" ] ;then
# Multilib build
  mkdir build64 build32

# 64-bit build
  ( unset ARCH
    cd build64 || exit $?
    SLKCFLAGS="${SLKCFLAGS} -fPIC"
    SB_CONFIGURE \
      --libdir=/usr/lib${LIBDIRSUFFIX} \
      --x-libraries=/usr/lib${LIBDIRSUFFIX} \
      --enable-win64 ${SB_MMOPTS} \
      --build=${SLKTARGET}-${SLKDTARGET}-linux || exit $?

    export MORECFLAGS=""
    make -j${NJOBS} || make || exit $?

  ) || exit $?

# 32-bit build
  ( unset ARCH
    cd build32 || exit $?
    export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"
    SLKCFLAGS="${SLKCFLAGS} -fno-omit-frame-pointer "
    SB_CONFIGURE \
      --libdir=/usr/lib \
      --x-libraries=/usr/lib \
      --with-wine64="${SB_SROOT}/build64" || exit $?

    SB_MAKE32 || exit $?

    SB_INSTALL ${PKG32} || exit $?
  ) || exit $?

  ( unset ARCH; cd build64 && SB_INSTALL ${PKG} ) || exit $?

  mkdir -p ${PKG32}/etc/ld.so.conf.d
  echo "/usr/lib/wine" \
    > ${PKG32}/etc/ld.so.conf.d/51-wine-${ARCH32}.conf || exit 1
  rm -rf ${PKG32}/usr/include

else

  SLKCFLAGS="${SLKCFLAGS} -fno-omit-frame-pointer"

# Normal build
  ( unset ARCH
    mkdir build32
    cd build32 || exit $?
    SB_CONFIGURE \
      --libdir=/usr/lib${LIBDIRSUFFIX} \
      --x-libraries=/usr/lib${LIBDIRSUFFIX} \
      --build=${SLKTARGET}-${SLKDTARGET}-linux || exit $?

    SB_MAKE32 || exit $?

    SB_INSTALL ${PKG} || exit $?
  ) || exit $?
fi

if [ -x /usr/bin/chrpath ] ;then
  chrpath --delete ${PKG}/usr/bin/wmc
  chrpath --delete ${PKG}/usr/bin/wrc
  chrpath --delete ${PKG}/usr/bin/wineserver
  if [ "${ARCH}" = "x86_64" ] ;then
    chrpath --delete ${PKG}/usr/bin/wine64
    chrpath --delete ${PKG32}/usr/bin/wine
  else
    chrpath --delete ${PKG}/usr/bin/wine
  fi
fi

mkdir -p ${PKG}/etc/wine

mkdir -p ${PKG}/etc/ld.so.conf.d
echo "/usr/lib${LIBDIRSUFFIX}/wine" \
  > ${PKG}/etc/ld.so.conf.d/50-wine-${ARCH}.conf || exit 1

find ${PKGF} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/lib/binfmt.d
cat > ${PKG}/usr/lib/binfmt.d/wine.conf <<'EOF'
# Pre-PE Windows Executables
:windows:M::MZ::/usr/bin/wine:

# PE Windows Executables
:windowsPE:M::PE::/usr/bin/wine:
EOF

# add wine dir to desktop
mkdir -p ${PKG}/etc/xdg/menus/applications-merged
zcat ${CWD}/desktop/wine.menu.gz \
  > ${PKG}/etc/xdg/menus/applications-merged/wine.menu || exit 1
mkdir -p ${PKG}/usr/share/desktop-directories
install -pm0644 ${CWD}/desktop/wine.directory \
  ${PKG}/usr/share/desktop-directories/wine.directory || exit 1

mkdir -p ${PKG}/usr/share/applications
for desktop in ${NAME}-{iexplore,inetcpl,joycpl,mime-msi,oleview,notepad,regedit,taskmgr,uninstaller,winhelp,wordpad,wine{boot,cfg,file,mine}}.desktop; do
  install -pm0644 ${CWD}/desktop/${desktop} \
    ${PKG}/usr/share/applications/${desktop} || exit 1
done

desktop-file-install --delete-original \
  --dir ${PKG}/usr/share/applications \
  --remove-mime-type="application/x-executable" \
  ${PKG}/usr/share/applications/${NAME}.desktop || exit 1

scalabledir=${PKG}/usr/share/icons/hicolor/scalable/apps
bitmapdir=${PKG}/usr/share/icons/hicolor/256x256/apps
bitmapdir48=${PKG}/usr/share/icons/hicolor/48x48/apps
mkdir -p ${scalabledir} ${bitmapdir} ${bitmapdir48}

# This replacement masks a composite program icon .SVG down
# so that only its full-size scalable icon is visible
PROGRAM_ICONFIX='s/height="272"/height="256"/;'\
's/width="632"/width="256"\n'\
'   x="368"\n'\
'   y="8"\n'\
'   viewBox="368, 8, 256, 256"/;'

install -p -m 644 dlls/user32/resources/oic_winlogo.svg \
  ${scalabledir}/wine.svg || exit 1

sed -i -e '3s/368/64/' ${scalabledir}/wine.svg || exit 1

if ! [ -x /usr/bin/rsvg-convert ] ;then
  ico=oic_winlogo
  rm -f programs/${ico}/${ico}*.png
  icotool -x --width=256 --height=256 -o dlls/user32/resources/ \
    dlls/user32/resources/${ico}.ico || exit 1
  install -p -m 644 dlls/user32/resources/${ico}*256x256x32.png \
    ${bitmapdir}/wine.png || exit 1
fi

for ico in iexplore msiexec notepad regedit taskmgr winefile winemine wordpad ;do
  install -p -m 644 programs/${ico}/${ico}.svg \
    ${scalabledir}/wine_${ico}.svg || exit 1
  sed -i -e "${PROGRAM_ICONFIX}" ${scalabledir}/wine_${ico}.svg
  if ! [ -x /usr/bin/rsvg-convert ] ;then
    rm -f programs/${ico}/${ico}*.png
    icotool -x --width=256 --height=256 -o programs/${ico}/ \
      programs/${ico}/${ico}.ico || exit 1
    install -p -m 644 programs/${ico}/${ico}*256x256x32.png \
      ${bitmapdir}/wine_${ico}.png
  fi
done

install -p -m 644 programs/winecfg/winecfg.svg \
  ${scalabledir}/winecfg.svg || exit 1
sed -i -e "${PROGRAM_ICONFIX}" ${scalabledir}/winecfg.svg || exit 1

install -p -m 644 programs/winhlp32/winhelp.svg \
  ${scalabledir}/wine_winhelp.svg || exit 1
sed -i -e "${PROGRAM_ICONFIX}" ${scalabledir}/wine_winhelp.svg || exit 1

install -p -m 644 dlls/joy.cpl/joy.svg \
  ${scalabledir}/wine_joy.svg || exit 1
sed -i -e '3s/368/64/' ${scalabledir}/wine_joy.svg || exit 1

if [ -x /usr/bin/rsvg-convert ] ;then
  for file in ${scalabledir}/*.svg ;do
    basefile=$(basename ${file} .svg)
    for res in 16 22 24 32 36 48 64 72 96 128 192 256 512 ;do
      dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
      mkdir -p ${dir}
      rsvg-convert -w ${res} -h ${res} ${file} \
        -o ${dir}/${basefile}.png || exit 1
    done
  done
else
  rm -f programs/winecfg/winecfg*.png
  icotool -x --width=256 --height=256 -o programs/winecfg/ \
    programs/winecfg/winecfg.ico || exit 1
  install -p -m 644 programs/winecfg/winecfg*256x256x32.png \
    ${bitmapdir}/winecfg.png || exit 1
  
  rm -f programs/winhlp32/winhelp*.png
  icotool -x --width=256 --height=256 -o programs/winhlp32/ \
    programs/winhlp32/winhelp.ico || exit 1
  install -p -m 644 programs/winhlp32/winhelp*256x256x32.png \
    ${bitmapdir}/wine_winhelp.png || exit 1

  for file in ${bitmapdir}/*.png ;do
    basefile=$(basename ${file})
    for res in 16 22 24 32 36 48 64 72 96 128 192 ;do
      dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
      mkdir -p ${dir}
      convert ${file} -filter Lanczos -resize ${res}x${res} \
        ${dir}/${basefile} || exit 1
    done
  done

  # Maximum size is 48x48
  rm -f dlls/joy.cpl/joy*.png
  icotool -x --width=48 --height=48 -o dlls/joy.cpl/ \
    dlls/joy.cpl/joy.ico || exit 1
  install -p -m 644 dlls/joy.cpl/joy*48x48x32.png \
    ${bitmapdir48}/wine_joy.png || exit 1

fi

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ANNOUNCE AUTHORS COPYING* LICENSE* README documentation/README.* \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
if [ "${SB_STAGING}" = "YES" ] || [ "${SB_PA}" = "YES" ] ; then
  for file in README LICENSE ;do
    cp -a ${STSRCDIR}/${file}.md ${DOCDIR}/${file}.md.staging
  done
fi
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required
if [ "${ARCH}" = "x86_64" ] ;then
  mkdir -p ${PKG32}/install
  cat ${CWD}/slack-desc-compat32 > ${PKG32}/install/slack-desc
  cat ${CWD}/slack-required > ${PKG32}/install/slack-required
fi
sed -e "s|_GECKO_VER_|${GECKO_VER}|g" -e "s|_MONO_VER_|${MONO_VER}|g" \
  -i ${PKGF}/*/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create  /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache -q /usr/share/icons/hicolor > /dev/null 2>&1
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database &> /dev/null
fi
EOF

SB_DOINST() {
cat >> ${1}/install/doinst.sh <<'EOF'
# Add ld.so.conf.d directory to /etc/ld.so.conf:
if fgrep ld.so.conf.d etc/ld.so.conf 1> /dev/null 2> /dev/null ; then
  true
else
  echo 'include /etc/ld.so.conf.d/*.conf' >> etc/ld.so.conf
fi
EOF
}
SB_DOINST ${PKG}
[ "${ARCH}" = "x86_64" ] && SB_DOINST ${PKG32}

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc ${PKG32}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{desktop,patches}
  install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${STSNAPUPDATE} ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/desktop/*.* \
    ${SBDIR}/desktop/
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

if [ "${ARCH}" = "x86_64" ] ;then
  ROOTCOMMANDS32="set -o errexit -o xtrace ; cd ${PKG32} ;
    /bin/chown --recursive root:root .  ;"

  ROOTCOMMANDS32="${ROOTCOMMANDS32}
    /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME32}.${PKGFORMAT} "

  if test ${UID} = 0; then
    eval ${ROOTCOMMANDS32}
    set +o xtrace
  elif test "$(type -t fakeroot)" = 'file'; then
    echo -e "\e[1mEntering fakeroot environment.\e[0m"
    echo ${ROOTCOMMANDS32} | fakeroot
  else
    echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
    /bin/su -c "${ROOTCOMMANDS32}"
  fi
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKGF} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
